{"paragraphs":[{"text":"%md\nSpark DataFrame - Scala API Basics\n==================================\n\n[List of Exercises] (https://docs.google.com/document/d/18lz-oRpNUr_rdYJtf0Z1Tdv_Gxiwe1M_NSUKKPcqe3o/edit?usp=sharing)\n\nAdvantages of using Scala\n- It's a JVM based language. So, ease of interoperability is high\n- DataFrame API is very similar to SQL. So, easy to quickly try and build pipelines even for beginners.\n- No data serialization / deserialization is required (like in the case of python). This is changing however - [link](https://twitter.com/databricks/status/927991555075575808)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Spark DataFrame - Scala API Basics</h1>\n<p><a href=\"https://docs.google.com/document/d/18lz-oRpNUr_rdYJtf0Z1Tdv_Gxiwe1M_NSUKKPcqe3o/edit?usp=sharing\">List of Exercises</a></p>\n<p>Advantages of using Scala</p>\n<ul>\n<li>It's a JVM based language. So, ease of interoperability is high</li>\n<li>DataFrame API is very similar to SQL. So, easy to quickly try and build pipelines even for beginners.</li>\n<li>No data serialization / deserialization is required (like in the case of python). This is changing however - <a href=\"https://twitter.com/databricks/status/927991555075575808\">link</a></li>\n</ul>\n"}]},"apps":[],"jobName":"paragraph_1510380353567_6139608","id":"20170630-150113_1832147768","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:46449"},{"text":"%md\n# 1. Read data\n\nSpark has the capability to read the data in a wide variety of formats. They include CSV, Parquet, JSON, Avro etc.\n\nPro Tip: The fastest way to read data in Spark is using Parquet format.\nAdvantages parquet format offers us:\n    1. Data can be partitioned by year, month, day etc for faster reads later.\n    2. Columnar compressed format. Expect 5-10x compression.\n\nBonus: Python Pandas 0.21 now supports Parquet format. [Link](https://twitter.com/xhochy/status/924422578600599555)\n## 1 Read data in CSV format","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>1. Read data</h1>\n<p>Spark has the capability to read the data in a wide variety of formats. They include CSV, Parquet, JSON, Avro etc.</p>\n<p>Pro Tip: The fastest way to read data in Spark is using Parquet format.\n<br  />Advantages parquet format offers us:</p>\n<pre><code>1. Data can be partitioned by year, month, day etc for faster reads later.\n2. Columnar compressed format. Expect 5-10x compression.\n</code></pre>\n<p>Bonus: Python Pandas 0.21 now supports Parquet format. <a href=\"https://twitter.com/xhochy/status/924422578600599555\">Link</a></p>\n<h2>1 Read data in CSV format</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353572_-9635097","id":"20171028-151319_319813096","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46450"},{"text":"val data = spark.read.option(\"header\", true)\n                .csv(\"hdfs://ec2-13-127-17-212.ap-south-1.compute.amazonaws.com/data/train.csv\")\ndata.show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndata: org.apache.spark.sql.DataFrame = [Semana: string, Agencia_ID: string ... 9 more fields]\n+------+----------+--------+--------+----------+-----------+-------------+---------+---------------+-----------+-----------------+\n|Semana|Agencia_ID|Canal_ID|Ruta_SAK|Cliente_ID|Producto_ID|Venta_uni_hoy|Venta_hoy|Dev_uni_proxima|Dev_proxima|Demanda_uni_equil|\n+------+----------+--------+--------+----------+-----------+-------------+---------+---------------+-----------+-----------------+\n|     3|      1110|       7|    3301|     15766|       1212|            3|    25.14|              0|        0.0|                3|\n|     3|      1110|       7|    3301|     15766|       1216|            4|    33.52|              0|        0.0|                4|\n|     3|      1110|       7|    3301|     15766|       1238|            4|    39.32|              0|        0.0|                4|\n|     3|      1110|       7|    3301|     15766|       1240|            4|    33.52|              0|        0.0|                4|\n|     3|      1110|       7|    3301|     15766|       1242|            3|    22.92|              0|        0.0|                3|\n|     3|      1110|       7|    3301|     15766|       1250|            5|     38.2|              0|        0.0|                5|\n|     3|      1110|       7|    3301|     15766|       1309|            3|    20.28|              0|        0.0|                3|\n|     3|      1110|       7|    3301|     15766|       3894|            6|     56.1|              0|        0.0|                6|\n|     3|      1110|       7|    3301|     15766|       4085|            4|     24.6|              0|        0.0|                4|\n+------+----------+--------+--------+----------+-----------+-------------+---------+---------------+-----------+-----------------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353573_-10019846","id":"20171028-152138_1323127176","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46451"},{"text":"val cols = Seq(\"Week\", \"SalesDepotID\", \"SalesChannelID\", \"RouteID\", \"ClientID\", \"ProductID\", \"SalesUnitThisWeek\", \"SalesThisWeek\", \"ReturnsUnitThisWeek\",\n  \"ReturnsNextWeek\", \"Demand\")\n\nval data = spark.read.option(\"header\", true)\n                  .csv(\"hdfs://ec2-13-127-17-212.ap-south-1.compute.amazonaws.com/data/train.csv\")\n                 .toDF(cols :_*)\n               \ndata.write.parquet(\"hdfs://ec2-13-127-17-212.ap-south-1.compute.amazonaws.com/data/train.parquet\")","dateUpdated":"2017-11-11T09:10:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ncols: Seq[String] = List(Week, SalesDepotID, SalesChannelID, RouteID, ClientID, ProductID, SalesUnitThisWeek, SalesThisWeek, ReturnsUnitThisWeek, ReturnsNextWeek, Demand)\n\ndata: org.apache.spark.sql.DataFrame = [Week: string, SalesDepotID: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510380353574_-8865599","id":"20171109-043855_204032803","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46452"},{"text":"%md\n## 1.2 Read data in Parquet format","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>1.2 Read data in Parquet format</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353575_-9250348","id":"20171028-152455_1102616321","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46453"},{"text":"val data = spark.read.parquet(\"hdfs://ec2-54-234-74-28.compute-1.amazonaws.com/data/train.parquet\")\n","user":"anonymous","dateUpdated":"2017-11-11T07:22:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndata: org.apache.spark.sql.DataFrame = [Week: string, SalesDepotID: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510384798493_-15635670","id":"20171111-071958_409605100","dateCreated":"2017-11-11T07:19:58+0000","dateStarted":"2017-11-11T07:22:37+0000","dateFinished":"2017-11-11T07:23:15+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46454"},{"text":"%md\n# 2. Select / Rename / Add / Drop columns\n\nNow, we shall move to the column operations on the dataframe.\n\n## 4. Inspect the data","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>2. Select / Rename / Add / Drop columns</h1>\n<p>Now, we shall move to the column operations on the dataframe.</p>\n<h2>4. Inspect the data</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353577_-11558842","id":"20171028-152704_1574835336","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46455"},{"text":"data","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres13: org.apache.spark.sql.DataFrame = [Week: string, SalesDepotID: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510380353578_-10404595","id":"20171028-154040_29398163","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46456"},{"text":"%md\nThere's no output in the above statement. This is where you have to know difference between transformations and actions. Spark doesn't start \ncomputation until an action is specified. Actions can be {show, collect, take, head, limit}.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>There's no output in the above statement. This is where you have to know difference between transformations and actions. Spark doesn't start\n<br  />computation until an action is specified. Actions can be {show, collect, take, head, limit}.</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353578_-10404595","id":"20170629-123336_1779344926","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46457"},{"text":"data.show(3)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|Week|SalesDepotID|SalesChannelID|RouteID|ClientID|ProductID|SalesUnitThisWeek|SalesThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|Demand|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|   9|        1531|             1|   2113| 1874801|    33671|                1|         9.99|                  0|            0.0|     1|\n|   9|        1531|             1|   2113| 1874801|    35303|                5|        31.25|                  0|            0.0|     5|\n|   9|        1531|             1|   2113| 1938955|    30574|                4|         25.0|                  0|            0.0|     4|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353579_-10789344","id":"20171028-154013_2045848151","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46458"},{"text":"%md \n## 5. Select one column from a dataframe (df)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>5. Select one column from a dataframe (df)</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353580_-12713088","id":"20170630-181042_315842834","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46459"},{"text":"data.select($\"ClientID\")\n    .show(7)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+\n|ClientID|\n+--------+\n| 1874801|\n| 1874801|\n| 1938955|\n| 1985507|\n| 1985507|\n| 1985507|\n| 1991146|\n+--------+\nonly showing top 7 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353581_-13097837","id":"20170629-123424_706086736","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46460"},{"text":"%md .head(n) also returns 'n' rows. However the return type is not a dataframe but an Array[Row]. Hence, refrain from using head. Try limit(n) if you're curious.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>.head(n) also returns &lsquo;n&rsquo; rows. However the return type is not a dataframe but an Array[Row]. Hence, refrain from using head. Try limit(n) if you&rsquo;re curious.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510380353581_-13097837","id":"20170629-123432_371199389","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46461"},{"text":"%md\n## 6. Select multiple columns from a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>6. Select multiple columns from a df</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353582_-11943591","id":"20170629-123449_1255780859","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46462"},{"text":"data.select($\"ClientID\",$\"Demand\")\n    .show(7)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+------+\n|ClientID|Demand|\n+--------+------+\n| 1874801|     1|\n| 1874801|     5|\n| 1938955|     4|\n| 1985507|     8|\n| 1985507|     4|\n| 1985507|     0|\n| 1991146|     4|\n+--------+------+\nonly showing top 7 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353583_-12328340","id":"20170629-123514_1017896837","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46463"},{"text":"%md\n## 7. Rename a column in a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>7. Rename a column in a df</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353584_-1940119","id":"20171028-154603_254656965","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46464"},{"text":"data.select($\"Demand\" as \"DMD\").show(7)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+\n|DMD|\n+---+\n|  1|\n|  5|\n|  4|\n|  8|\n|  4|\n|  0|\n|  4|\n+---+\nonly showing top 7 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353585_-2324868","id":"20170702-120605_1824452888","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46465"},{"text":"%md\n## 8. Rename multiple columns in a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>8. Rename multiple columns in a df</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353586_-1170621","id":"20171028-154703_585300788","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46466"},{"text":"val rename_cols = Seq(\"C_ID\", \"DMD\")\ndata.select($\"ClientID\", $\"Demand\").toDF(rename_cols :_*).show(7)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nrename_cols: Seq[String] = List(C_ID, DMD)\n+-------+---+\n|   C_ID|DMD|\n+-------+---+\n|1874801|  1|\n|1874801|  5|\n|1938955|  4|\n|1985507|  8|\n|1985507|  4|\n|1985507|  0|\n|1991146|  4|\n+-------+---+\nonly showing top 7 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353586_-1555370","id":"20170630-193439_1420474628","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46467"},{"text":"%md *The $ dollar operator is needed whenever sql based functions are used.*\n\nPro TIP: More often than not, use $. It just works!","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p><em>The $ dollar operator is needed whenever sql based functions are used.</em></p>\n<p>Pro TIP: More often than not, use $. It just works!</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353587_-1555370","id":"20170630-194312_2058741454","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46468"},{"text":"%md\n## 9. Add a column to a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorHide":true,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>9. Add a column to a df</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353588_-3479115","id":"20171028-160433_8526550","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46469"},{"text":"data.select($\"Week\", $\"SalesDepotID\")\n    .withColumn(\"new\", lit(1)).show(9)\n    \n","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------------+---+\n|Week|SalesDepotID|new|\n+----+------------+---+\n|   9|        1531|  1|\n|   9|        1531|  1|\n|   9|        1531|  1|\n|   9|        1531|  1|\n|   9|        1531|  1|\n|   9|        1531|  1|\n|   9|        1531|  1|\n|   9|        1531|  1|\n|   9|        1531|  1|\n+----+------------+---+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353589_-3863864","id":"20171028-160443_1582927527","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46470"},{"text":"%md\n## 10. Add multiple columns to a df\nUse the same logic multiple times by chaining the withColumn operation.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>10. Add multiple columns to a df</h2>\n<p>Use the same logic multiple times by chaining the withColumn operation.</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353590_-2709617","id":"20171028-161203_2109778252","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46471"},{"text":"data.select($\"Week\", $\"SalesDepotID\")\n    .withColumn(\"new\", lit(1))\n    .withColumn(\"today\", current_date).show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------------+---+----------+\n|Week|SalesDepotID|new|     today|\n+----+------------+---+----------+\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n|   9|        1531|  1|2017-11-09|\n+----+------------+---+----------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353590_-2709617","id":"20171028-161236_367739926","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46472"},{"text":"%md Notice that current_date is a predefined func.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Notice that current_date is a predefined func.</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353591_-3094366","id":"20171109-045354_142585415","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46473"},{"text":"%md\n## 11. Drop a column from a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>11. Drop a column from a df</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353592_-5018110","id":"20171028-161329_1884848401","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46474"},{"text":"data.drop(\"Demand\").show(9)","user":"anonymous","dateUpdated":"2017-11-11T07:25:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+\n|Week|SalesDepotID|SalesChannelID|RouteID|ClientID|ProductID|SalesUnitThisWeek|SalesThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+\n|   9|        1531|             1|   2113| 1874801|    33671|                1|         9.99|                  0|            0.0|\n|   9|        1531|             1|   2113| 1874801|    35303|                5|        31.25|                  0|            0.0|\n|   9|        1531|             1|   2113| 1938955|    30574|                4|         25.0|                  0|            0.0|\n|   9|        1531|             1|   2113| 1985507|    30531|                8|        62.24|                  0|            0.0|\n|   9|        1531|             1|   2113| 1985507|    30548|                4|        21.52|                  0|            0.0|\n|   9|        1531|             1|   2113| 1985507|    36964|                6|        27.66|                  6|          27.66|\n|   9|        1531|             1|   2113| 1991146|    30531|                4|        31.12|                  0|            0.0|\n|   9|        1531|             1|   2113| 1991146|    30554|                3|        16.14|                  0|            0.0|\n|   9|        1531|             1|   2113| 1991146|    30568|                4|        28.16|                  0|            0.0|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353593_-5402859","id":"20171028-161339_1462506866","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:25:02+0000","dateFinished":"2017-11-11T07:25:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46475"},{"text":"%md\n## 12. Drop multiple columns from a dataframe","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>12. Drop multiple columns from a dataframe</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353593_-5402859","id":"20170630-180346_1102345919","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46476"},{"text":"data.columns","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres46: Array[String] = Array(Week, SalesDepotID, SalesChannelID, RouteID, ClientID, ProductID, SalesUnitThisWeek, SalesThisWeek, ReturnsUnitThisWeek, ReturnsNextWeek, Demand)\n"}]},"apps":[],"jobName":"paragraph_1510380353594_-4248613","id":"20171028-132410_545847614","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46477"},{"text":"val drop_cols = Seq(\"ClientID\", \"SalesDepotID\", \"ProductID\", \"SalesThisWeek\", \"SalesThisWeek\")\n\ndata.drop(drop_cols :_*).show(9)\n\ndata.show","user":"anonymous","dateUpdated":"2017-11-11T07:27:24+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndrop_cols: Seq[String] = List(ClientID, SalesDepotID, ProductID, SalesThisWeek, SalesThisWeek)\n+----+--------------+-------+-----------------+-------------------+---------------+------+\n|Week|SalesChannelID|RouteID|SalesUnitThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|Demand|\n+----+--------------+-------+-----------------+-------------------+---------------+------+\n|   9|             1|   2113|                1|                  0|            0.0|     1|\n|   9|             1|   2113|                5|                  0|            0.0|     5|\n|   9|             1|   2113|                4|                  0|            0.0|     4|\n|   9|             1|   2113|                8|                  0|            0.0|     8|\n|   9|             1|   2113|                4|                  0|            0.0|     4|\n|   9|             1|   2113|                6|                  6|          27.66|     0|\n|   9|             1|   2113|                4|                  0|            0.0|     4|\n|   9|             1|   2113|                3|                  0|            0.0|     3|\n|   9|             1|   2113|                4|                  0|            0.0|     4|\n+----+--------------+-------+-----------------+-------------------+---------------+------+\nonly showing top 9 rows\n\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|Week|SalesDepotID|SalesChannelID|RouteID|ClientID|ProductID|SalesUnitThisWeek|SalesThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|Demand|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|   9|        1531|             1|   2113| 1874801|    33671|                1|         9.99|                  0|            0.0|     1|\n|   9|        1531|             1|   2113| 1874801|    35303|                5|        31.25|                  0|            0.0|     5|\n|   9|        1531|             1|   2113| 1938955|    30574|                4|         25.0|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    30531|                8|        62.24|                  0|            0.0|     8|\n|   9|        1531|             1|   2113| 1985507|    30548|                4|        21.52|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    36964|                6|        27.66|                  6|          27.66|     0|\n|   9|        1531|             1|   2113| 1991146|    30531|                4|        31.12|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1991146|    30554|                3|        16.14|                  0|            0.0|     3|\n|   9|        1531|             1|   2113| 1991146|    30568|                4|        28.16|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1991146|    31309|                1|         6.25|                  0|            0.0|     1|\n|   9|        1531|             1|   2113| 1991146|    31513|                2|        19.98|                  0|            0.0|     2|\n|   9|        1531|             1|   2113| 1991146|    32939|                6|        46.68|                  0|            0.0|     6|\n|   9|        1531|             1|   2113| 1991146|    35303|               10|         62.5|                  0|            0.0|    10|\n|   9|        1531|             1|   2113| 1991149|    36964|                3|        13.83|                  0|            0.0|     3|\n|   9|        1531|             1|   2113| 2007766|    31466|                2|        19.98|                  0|            0.0|     2|\n|   9|        1531|             1|   2113| 2007766|    31470|                2|        19.98|                  0|            0.0|     2|\n|   9|        1531|             1|   2113| 2007766|    31511|                2|        19.98|                  0|            0.0|     2|\n|   9|        1531|             1|   2113| 2007766|    31513|                2|        19.98|                  0|            0.0|     2|\n|   9|        1531|             1|   2113| 2069968|    36964|                1|         4.61|                  0|            0.0|     1|\n|   9|        1531|             1|   2113| 2070687|    36964|                2|         9.22|                  0|            0.0|     2|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353595_-4633362","id":"20170630-180406_886238385","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:27:24+0000","dateFinished":"2017-11-11T07:27:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46478"},{"text":"%md # 3. Type-casting columns in a df\n\n## 13. Convert a column of type T to type T\n\nType-casting columns are useful if the types are not appropriately defined when data is stored. Also, the arithmetic operations are slightly faster on int/float columns rather than implicitly type-casted columns.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>3. Type-casting columns in a df</h1>\n<h2>13. Convert a column of type T to type T</h2>\n<p>Type-casting columns are useful if the types are not appropriately defined when data is stored. Also, the arithmetic operations are slightly faster on int/float columns rather than implicitly type-casted columns.</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353596_-6557106","id":"20171028-161458_529413323","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46479"},{"text":"case Class (Week: Int, SalesDepotID: String, ....)\ndata.printSchema","user":"anonymous","dateUpdated":"2017-11-11T12:01:47+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- Week: string (nullable = true)\n |-- SalesDepotID: string (nullable = true)\n |-- SalesChannelID: string (nullable = true)\n |-- RouteID: string (nullable = true)\n |-- ClientID: string (nullable = true)\n |-- ProductID: string (nullable = true)\n |-- SalesUnitThisWeek: string (nullable = true)\n |-- SalesThisWeek: string (nullable = true)\n |-- ReturnsUnitThisWeek: string (nullable = true)\n |-- ReturnsNextWeek: string (nullable = true)\n |-- Demand: string (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1510380353597_-6941855","id":"20171109-045443_884007599","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:28:21+0000","dateFinished":"2017-11-11T07:28:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46480"},{"text":"data.select($\"Demand\".cast(\"float\")).printSchema","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- Demand: float (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1510380353597_-6941855","id":"20171109-045504_489871850","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46481"},{"text":"%md # 4. Select (Subset / Filter) rows from a df\n\n## 15. Filter numeric columns based on comparison operators","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>4. Select (Subset / Filter) rows from a df</h1>\n<h2>15. Filter numeric columns based on comparison operators</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353598_-5787608","id":"20171028-161703_721391652","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46482"},{"text":"data.select($\"Week\", $\"Demand\", $\"ClientID\")\n    .where($\"Demand\" > 60).show(9)","user":"anonymous","dateUpdated":"2017-11-11T07:29:26+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------+--------+\n|Week|Demand|ClientID|\n+----+------+--------+\n|   9|    69|  161155|\n|   9|    63|  161155|\n|   9|    79|  161155|\n|   9|   122|  161155|\n|   9|    63|  161155|\n|   9|   120|  343507|\n|   9|    80| 4363778|\n|   9|    80| 4448708|\n|   9|    80| 4490126|\n+----+------+--------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353599_-6172357","id":"20170629-123558_2037765849","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:29:26+0000","dateFinished":"2017-11-11T07:29:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46483"},{"text":"%md\n## 16. Filter based on multiple conditions","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>16. Filter based on multiple conditions</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353600_-20408066","id":"20170629-123735_818517082","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46484"},{"text":"data.select($\"ClientID\", $\"Demand\", $\"ProductID\")\n    .filter($\"Demand\" > 60 && $\"Demand\" < 100).show(9)","user":"anonymous","dateUpdated":"2017-11-11T07:30:07+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+------+---------+\n|ClientID|Demand|ProductID|\n+--------+------+---------+\n|  161155|    69|    30531|\n|  161155|    63|    30574|\n|  161155|    79|    31309|\n|  161155|    63|    35783|\n| 4363778|    80|    36610|\n| 4448708|    80|    36610|\n| 4490126|    80|    36610|\n| 1020412|    80|    45143|\n| 1209322|    80|    45143|\n+--------+------+---------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353600_-20408066","id":"20170630-184820_1293140504","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:30:07+0000","dateFinished":"2017-11-11T07:30:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46485"},{"text":"%md #### Filtering on string columns \nTry it yourself.\n\nHint: Try using *\"===\", .contains, .like* operators","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h4>Filtering on string columns</h4>\n<p>Try it yourself.</p>\n<p>Hint: Try using <em>&ldquo;===&ldquo;, .contains, .like</em> operators</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353601_-20792815","id":"20170629-123823_485303408","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46486"},{"text":"%md\n## 19. Filter rows on exact match from a list","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>19. Filter rows on exact match from a list</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353602_-19638569","id":"20170629-130522_905310665","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46487"},{"text":"val week_values = Seq(3, 4, 5, 6, 7)\ndata.select(\"ClientID\", \"Week\", \"SalesThisWeek\", \"Demand\")\n    .where($\"Week\".isin(week_values:_*)).show(9)\n    \ndata.select(\"ClientID\", \"Week\", \"SalesThisWeek\", \"Demand\")\n    .where($\"Week\".isin(5, 7, 8)).show(9)","dateUpdated":"2017-11-11T07:32:57+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nvalues: Seq[Int] = List(3, 4, 5, 6, 7)\n+--------+----+-------------+------+\n|ClientID|Week|SalesThisWeek|Demand|\n+--------+----+-------------+------+\n| 2383837|   7|        38.25|     1|\n| 2387922|   7|        17.78|     2|\n| 2387922|   7|        17.78|     2|\n| 2435852|   7|        17.96|     2|\n| 2435852|   7|        15.57|     3|\n| 2435852|   7|         18.2|     4|\n| 2435852|   7|         48.9|     6|\n| 2435852|   7|        47.44|     8|\n| 2435852|   7|        17.78|     2|\n+--------+----+-------------+------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353602_-19638569","id":"20170629-130833_780017670","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46488"},{"text":"%md\n## 20. Filter rows excluding values from a list","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>20. Filter rows excluding values from a list</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353603_-20023318","id":"20170629-130913_1487177821","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46489"},{"text":"data.select(\"ClientID\", \"Week\", \"SalesThisWeek\", \"Demand\")\n    .where(not($\"Week\".isin(values:_*)))\n    .show(7)\n    \ndata.select(\"ClientID\", \"Week\", \"SalesThisWeek\", \"Demand\")\n    .filter(!($\"Week\".isin(2, 3)))\n    .show(7)","dateUpdated":"2017-11-11T07:33:33+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----+-------------+------+\n|ClientID|Week|SalesThisWeek|Demand|\n+--------+----+-------------+------+\n| 1874801|   9|         9.99|     1|\n| 1874801|   9|        31.25|     5|\n| 1938955|   9|         25.0|     4|\n| 1985507|   9|        62.24|     8|\n| 1985507|   9|        21.52|     4|\n| 1985507|   9|        27.66|     0|\n| 1991146|   9|        31.12|     4|\n+--------+----+-------------+------+\nonly showing top 7 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353604_-21947062","id":"20170629-130932_1358198527","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46490"},{"text":"%md\n## 21. Drop duplicate rows based on multiple columns","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>21. Drop duplicate rows based on multiple columns</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353605_-22331811","id":"20170630-194656_347854161","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46491"},{"text":"data.dropDuplicates(\"Week\", \"Demand\").count","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres43: Long = 8590\n"}]},"apps":[],"jobName":"paragraph_1510380353605_-22331811","id":"20171028-164221_152374871","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46492"},{"text":"%md\n## 22. Drop duplicate rows based on all columns","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>22. Drop duplicate rows based on all columns</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353606_-21177564","id":"20171028-164635_1349304398","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46493"},{"text":"//data.dropDuplicates().count\n\ndata.dropDuplicates(\"ClientID\", \"ProductID\").count","user":"anonymous","dateUpdated":"2017-11-11T07:35:05+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres11: Long = 25831538\n"}]},"apps":[],"jobName":"paragraph_1510380353607_-21562313","id":"20171028-164700_1017302506","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:35:05+0000","dateFinished":"2017-11-11T07:36:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46494"},{"text":"%md # 5. String columns operations in a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>5. String columns operations in a df</h1>\n"}]},"apps":[],"jobName":"paragraph_1510380353608_-23486058","id":"20171028-164657_1557594498","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46495"},{"text":"%md\nDIY exercises\n23. Replace a string with certain value in a column in a df\n24. Replace a regex pattern with certain value in a column in a df\n25. Extract substrings from a string column in a df\n26. Concat strings from multiple columns in a df\n","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>DIY exercises</p>\n<ol>\n<li>Replace a string with certain value in a column in a df</li>\n<li>Replace a regex pattern with certain value in a column in a df</li>\n<li>Extract substrings from a string column in a df</li>\n<li>Concat strings from multiple columns in a df</li>\n</ol>\n"}]},"apps":[],"jobName":"paragraph_1510380353608_-23486058","id":"20171028-164825_1410186150","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46496"},{"text":"%md # 6. Sort rows in a df\n\n### 27. Sort rows based on single column","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>6. Sort rows in a df</h1>\n<h3>27. Sort rows based on single column</h3>\n"}]},"apps":[],"jobName":"paragraph_1510380353609_-23870807","id":"20170629-150912_1864982686","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46497"},{"text":"data.select($\"Week\", $\"Demand\")\n    .sort(desc(\"Demand\")).show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------+\n|Week|Demand|\n+----+------+\n|   5|   999|\n|   8|   999|\n|   4|   998|\n|   3|   998|\n|   3|   998|\n|   6|   998|\n|   6|   998|\n|   7|   998|\n|   5|   998|\n+----+------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353610_-22716560","id":"20170629-150104_26782218","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46498"},{"text":"%md\n## 28. Sort rows based on multiple columns","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/text","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>28. Sort rows based on multiple columns</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353611_-23101309","id":"20171028-165651_1317476605","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46499"},{"text":"data.select($\"Week\", $\"Demand\")\n    .sort(desc(\"Demand\"), asc(\"Week\")).show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------+\n|Week|Demand|\n+----+------+\n|   5|   999|\n|   8|   999|\n|   3|   998|\n|   3|   998|\n|   4|   998|\n|   5|   998|\n|   6|   998|\n|   6|   998|\n|   7|   998|\n+----+------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353611_-23101309","id":"20171028-165711_1776558992","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46500"},{"text":"%md # 7. Aggregate data\n## 29. Aggregate data on a column","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>7. Aggregate data</h1>\n<h2>29. Aggregate data on a column</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353612_-25025053","id":"20170630-154651_592712664","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46501"},{"text":"data.agg(\n    mean($\"Demand\")\n    ).show","dateUpdated":"2017-11-11T07:38:21+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------+\n|       avg(Demand)|\n+------------------+\n|7.2245640038056385|\n+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353613_-25409802","id":"20171028-170820_667440827","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46502"},{"text":"%md\n## 30. Aggregate data using multiple columns","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>30. Aggregate data using multiple columns</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353613_-25409802","id":"20171028-170909_2024229991","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46503"},{"text":"data.groupBy($\"Week\", $\"ProductID\")\n    .agg(count($\"*\") as \"count\", mean($\"Demand\") as \"mean\")\n    .show(9)","user":"anonymous","dateUpdated":"2017-11-11T07:39:44+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+---------+------+------------------+\n|Week|ProductID| count|              mean|\n+----+---------+------+------------------+\n|   6|     1238|166625|  3.13377344336084|\n|   6|    31506| 13102| 8.493588765074035|\n|   6|    35525|   670| 35.04626865671642|\n|   6|    36175|     2|               1.0|\n|   3|    35785|   343| 4.034985422740525|\n|   3|    35728|   655| 67.16793893129771|\n|   3|     5345|  3659| 4.048100573927303|\n|   3|    47943|    18|132.55555555555554|\n|   3|    37221|     7| 6.857142857142857|\n+----+---------+------+------------------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353614_-24255555","id":"20171028-171005_823475246","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:39:44+0000","dateFinished":"2017-11-11T07:40:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46504"},{"text":"%md \n\n## 31. Pivot / cast a df on a column","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>31. Pivot / cast a df on a column</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353615_-24640304","id":"20171028-170928_307988706","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46505"},{"text":"data.groupBy(\"ClientID\")\n    .agg(count($\"Demand\") as \"num_Demand\",\n         mean($\"Demand\") as \"mean_Demand_value\").show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------+------------------+\n|ClientID|num_Demand| mean_Demand_value|\n+--------+----------+------------------+\n| 2060499|        80|            3.4375|\n| 4542761|        32|           3.40625|\n| 1363693|       216| 6.435185185185185|\n| 2454194|       192|          4.140625|\n| 4408883|       222| 13.81981981981982|\n| 2180641|        18|15.277777777777779|\n| 1828442|        84|3.5714285714285716|\n| 2235346|        63| 4.158730158730159|\n|  462995|        44| 4.431818181818182|\n+--------+----------+------------------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353615_-14252084","id":"20170630-154807_180538202","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46506"},{"text":"%md\n## 32. Pivot / cast a df on multiple columns","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>32. Pivot / cast a df on multiple columns</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353616_-14252084","id":"20171028-171036_888997892","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46507"},{"text":"data.groupBy(\"ClientID\").pivot(\"Week\").agg(count(\"Demand\")).show(7)","user":"anonymous","dateUpdated":"2017-11-11T07:44:00+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----+----+----+----+----+---+---+\n|ClientID|   3|   4|   5|   6|   7|  8|  9|\n+--------+----+----+----+----+----+---+---+\n| 4188574|   2|   2|   2|   2|   3|  3|  3|\n| 4377049|  44|  42|  49|  46|  39| 48| 44|\n|  331808|   4|  17|  12|  12|  13|  8| 11|\n| 1970918|   7|   7|  11|   8|   8|  4|  8|\n| 1283223|  34|  35|  34|  34|  29| 30| 31|\n| 4741699|null|null|null|null|null|  7|  6|\n| 4616472|  27|  28|  41|  25|  32| 36| 33|\n+--------+----+----+----+----+----+---+---+\nonly showing top 7 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353617_-14636833","id":"20170630-160120_1109927041","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:44:00+0000","dateFinished":"2017-11-11T07:44:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46508"},{"text":"%md ## 33. Melt a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>33. Melt a df</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353618_-13482586","id":"20171109-052259_746103219","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46509"},{"text":"%md # 8. Treating missing values\n\n## 34. Figure out missing values from a column in a df","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>8. Treating missing values</h1>\n<h2>34. Figure out missing values from a column in a df</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353618_-13482586","id":"20170630-171510_105164651","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46510"},{"text":"data.where($\"Demand\".isNull).show","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|Week|SalesDepotID|SalesChannelID|RouteID|ClientID|ProductID|SalesUnitThisWeek|SalesThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|Demand|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353619_-13867335","id":"20171103-053620_1422671964","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46511"},{"text":"%md ## 35. Fill a column with missing values with a constant","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>35. Fill a column with missing values with a constant</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353620_-15791080","id":"20171103-053618_215998971","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46512"},{"text":"data.na.fill(\"-1\", Seq(\"Demand\"))\n    .na.fill(-999, Seq(\"ClientID\"))\n    .show(9)","dateUpdated":"2017-11-11T07:45:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|Week|SalesDepotID|SalesChannelID|RouteID|ClientID|ProductID|SalesUnitThisWeek|SalesThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|Demand|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|   9|        1531|             1|   2113| 1874801|    33671|                1|         9.99|                  0|            0.0|     1|\n|   9|        1531|             1|   2113| 1874801|    35303|                5|        31.25|                  0|            0.0|     5|\n|   9|        1531|             1|   2113| 1938955|    30574|                4|         25.0|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    30531|                8|        62.24|                  0|            0.0|     8|\n|   9|        1531|             1|   2113| 1985507|    30548|                4|        21.52|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    36964|                6|        27.66|                  6|          27.66|     0|\n|   9|        1531|             1|   2113| 1991146|    30531|                4|        31.12|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1991146|    30554|                3|        16.14|                  0|            0.0|     3|\n|   9|        1531|             1|   2113| 1991146|    30568|                4|        28.16|                  0|            0.0|     4|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353620_-15791080","id":"20171109-052806_2102846818","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46513"},{"text":"%md ## 36. Fill all the missing values in a df with a constant","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>36. Fill all the missing values in a df with a constant</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353621_-16175829","id":"20171028-171214_1484459708","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46514"},{"text":"data.na.fill(-3.14).show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|Week|SalesDepotID|SalesChannelID|RouteID|ClientID|ProductID|SalesUnitThisWeek|SalesThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|Demand|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|   9|        1531|             1|   2113| 1874801|    33671|                1|         9.99|                  0|            0.0|     1|\n|   9|        1531|             1|   2113| 1874801|    35303|                5|        31.25|                  0|            0.0|     5|\n|   9|        1531|             1|   2113| 1938955|    30574|                4|         25.0|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    30531|                8|        62.24|                  0|            0.0|     8|\n|   9|        1531|             1|   2113| 1985507|    30548|                4|        21.52|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    36964|                6|        27.66|                  6|          27.66|     0|\n|   9|        1531|             1|   2113| 1991146|    30531|                4|        31.12|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1991146|    30554|                3|        16.14|                  0|            0.0|     3|\n|   9|        1531|             1|   2113| 1991146|    30568|                4|        28.16|                  0|            0.0|     4|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353622_-15021582","id":"20170630-185002_1157831963","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46515"},{"text":"%md # 9. Working with dates","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>9. Working with dates</h1>\n"}]},"apps":[],"jobName":"paragraph_1510380353623_-15406331","id":"20171109-053004_1995299031","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46516"},{"text":"val df2 = data.withColumn(\"current_date\", current_date)\n    .withColumn(\"next_date\", date_add(current_date, 1))\n    .select($\"current_date\", $\"next_date\")\n    .withColumn(\"diff\", datediff($\"current_date\", $\"next_date\"))\n    \ndf2.show(7)\ndata.show(7)","user":"anonymous","dateUpdated":"2017-11-11T07:47:50+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndf2: org.apache.spark.sql.DataFrame = [current_date: date, next_date: date ... 1 more field]\n+------------+----------+----+\n|current_date| next_date|diff|\n+------------+----------+----+\n|  2017-11-11|2017-11-12|  -1|\n|  2017-11-11|2017-11-12|  -1|\n|  2017-11-11|2017-11-12|  -1|\n|  2017-11-11|2017-11-12|  -1|\n|  2017-11-11|2017-11-12|  -1|\n|  2017-11-11|2017-11-12|  -1|\n|  2017-11-11|2017-11-12|  -1|\n+------------+----------+----+\nonly showing top 7 rows\n\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|Week|SalesDepotID|SalesChannelID|RouteID|ClientID|ProductID|SalesUnitThisWeek|SalesThisWeek|ReturnsUnitThisWeek|ReturnsNextWeek|Demand|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\n|   9|        1531|             1|   2113| 1874801|    33671|                1|         9.99|                  0|            0.0|     1|\n|   9|        1531|             1|   2113| 1874801|    35303|                5|        31.25|                  0|            0.0|     5|\n|   9|        1531|             1|   2113| 1938955|    30574|                4|         25.0|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    30531|                8|        62.24|                  0|            0.0|     8|\n|   9|        1531|             1|   2113| 1985507|    30548|                4|        21.52|                  0|            0.0|     4|\n|   9|        1531|             1|   2113| 1985507|    36964|                6|        27.66|                  6|          27.66|     0|\n|   9|        1531|             1|   2113| 1991146|    30531|                4|        31.12|                  0|            0.0|     4|\n+----+------------+--------------+-------+--------+---------+-----------------+-------------+-------------------+---------------+------+\nonly showing top 7 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353624_-17330075","id":"20171109-053024_2044828408","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T07:47:50+0000","dateFinished":"2017-11-11T07:47:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46517"},{"text":"%md # 38. Extract day, month, year from a date column","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>38. Extract day, month, year from a date column</h1>\n"}]},"apps":[],"jobName":"paragraph_1510380353624_-17330075","id":"20171109-053051_851716521","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46518"},{"text":"data.withColumn(\"current_date\", current_date)\n    .select($\"current_date\")\n    .withColumn(\"day\", dayofmonth($\"current_date\"))\n    .withColumn(\"month\", month($\"current_date\"))\n    .withColumn(\"year\", year($\"current_date\"))\n    .show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+---+-----+----+\n|current_date|day|month|year|\n+------------+---+-----+----+\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n|  2017-11-09|  9|   11|2017|\n+------------+---+-----+----+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353625_-17714824","id":"20171109-053310_459178003","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46519"},{"text":"%md # 10. Merge / Join / Append two dataframes\n\n## 39. Joining two dfs - left, right, outer, inner","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>10. Merge / Join / Append two dataframes</h1>\n<h2>39. Joining two dfs - left, right, outer, inner</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353626_-16560577","id":"20171109-053404_1893342184","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46520"},{"text":"val data1 = data.limit(3).select(\"Week\", \"Demand\")\nval data2 = data.limit(5).select(\"RouteID\", \"Demand\")\n\ndata1.join(data2, Seq(\"Demand\"), \"inner\").show","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ndata1: org.apache.spark.sql.DataFrame = [Week: string, Demand: string]\n\ndata2: org.apache.spark.sql.DataFrame = [RouteID: string, Demand: string]\n+------+----+-------+\n|Demand|Week|RouteID|\n+------+----+-------+\n|     1|   9|   2113|\n|     5|   9|   2113|\n|     4|   9|   2113|\n|     4|   9|   2113|\n+------+----+-------+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353626_-16560577","id":"20171109-053445_153935159","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46521"},{"text":"data1.show","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------+\n|Week|Demand|\n+----+------+\n|   9|     1|\n|   9|     5|\n|   9|     4|\n+----+------+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353627_-16945326","id":"20171109-053552_1228941048","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46522"},{"text":"data2.show","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------+\n|RouteID|Demand|\n+-------+------+\n|   2113|     1|\n|   2113|     5|\n|   2113|     4|\n|   2113|     8|\n|   2113|     4|\n+-------+------+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353628_-18869071","id":"20171109-053618_389310824","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46523"},{"text":"%md # 40. Appending dataframes using union","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>40. Appending dataframes using union</h1>\n"}]},"apps":[],"jobName":"paragraph_1510380353629_-19253820","id":"20171109-053621_1228959835","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46524"},{"text":"data1.union(data2).show","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+------+\n|Week|Demand|\n+----+------+\n|   9|     1|\n|   9|     5|\n|   9|     4|\n|2113|     1|\n|2113|     5|\n|2113|     4|\n|2113|     8|\n|2113|     4|\n+----+------+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353629_-19253820","id":"20171109-053800_261857139","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46525"},{"text":"%md This is obviously buggy! Try to fix this.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>This is obviously buggy! Try to fix this.</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353630_-18099573","id":"20171109-053812_12479645","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46526"},{"text":"%md # 11. Caching the data for further use\n\n## 41. Cache / Persist - memory / memory & disk\n\nOften, we have to create intermediate results that we tend to join with other dataframes.\nExample: creation of count features, user features, aggregates for machine learning tasks. We join these to the main training set.\nIn such a case, creation of each set of features runs the whole pipeline of reading the dataset etc. Instead, we can cache the intermediate\ndataset so that when we join these datasets, the whole DAG isn't triggered instead the computation starts from the point where we cached the data.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>11. Caching the data for further use</h1>\n<h2>41. Cache / Persist - memory / memory &amp; disk</h2>\n<p>Often, we have to create intermediate results that we tend to join with other dataframes.\n<br  />Example: creation of count features, user features, aggregates for machine learning tasks. We join these to the main training set.\n<br  />In such a case, creation of each set of features runs the whole pipeline of reading the dataset etc. Instead, we can cache the intermediate\n<br  />dataset so that when we join these datasets, the whole DAG isn't triggered instead the computation starts from the point where we cached the data.</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353631_-18484322","id":"20171109-054021_1058799091","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46527"},{"text":"val tmp1 = data.limit(100000)","user":"anonymous","dateUpdated":"2017-11-11T11:53:22+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ntmp1: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Week: string, SalesDepotID: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510380353632_-32720031","id":"20171109-054343_461890621","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T11:53:22+0000","dateFinished":"2017-11-11T11:53:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:46528"},{"text":"tmp1.groupBy(\"ClientID\", \"RouteID\", \"Week\").agg(expr(\"PERCENTILE(DEMAND, 0.5)\") as \"median\").show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------+----+------+\n|ClientID|RouteID|Week|median|\n+--------+-------+----+------+\n| 1026499|   2850|   9|   4.0|\n| 1140138|   2101|   9|   5.0|\n| 1148913|   1603|   9|   1.5|\n| 1156781|   5512|   9|   3.0|\n| 1182418|   1003|   9|   2.0|\n| 1203202|   2801|   9|   6.0|\n| 1238074|   1204|   9|   2.0|\n| 1244983|   5501|   9|   4.0|\n| 1263979|   4550|   9|   3.0|\n+--------+-------+----+------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353632_-32720031","id":"20171109-054043_1412301147","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46529"},{"text":"val tmp2 = data.limit(100000).persist()","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\ntmp: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Week: string, SalesDepotID: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510380353633_-33104780","id":"20171109-054124_1909147814","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46530"},{"text":"tmp2.groupBy(\"ClientID\", \"RouteID\", \"Week\").agg(expr(\"PERCENTILE(DEMAND, 0.5)\") as \"median\").show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------+----+------+\n|ClientID|RouteID|Week|median|\n+--------+-------+----+------+\n| 1032631|   2116|   8|   6.5|\n|  103754|   1152|   8|   6.0|\n|  103887|   2111|   8|   4.0|\n|  104832|   1006|   8|   1.5|\n|  105004|   2114|   8|   5.0|\n|  105072|   2112|   8|   3.0|\n|  105174|   1118|   8|   5.0|\n| 1057274|   1012|   8|   4.0|\n|  105947|   4414|   8|   1.0|\n+--------+-------+----+------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353634_-31950533","id":"20171109-054303_954150575","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46531"},{"text":"tmp2.groupBy(\"ClientID\", \"RouteID\", \"Week\").agg(expr(\"PERCENTILE(DEMAND, 0.75)\") as \"quartile_3\").show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------+----+----------+\n|ClientID|RouteID|Week|quartile_3|\n+--------+-------+----+----------+\n| 1032631|   2116|   8|     12.75|\n|  103754|   1152|   8|       8.0|\n|  103887|   2111|   8|       4.0|\n|  104832|   1006|   8|      2.25|\n|  105004|   2114|   8|      9.75|\n|  105072|   2112|   8|      5.25|\n|  105174|   1118|   8|       5.0|\n| 1057274|   1012|   8|       5.5|\n|  105947|   4414|   8|       5.5|\n+--------+-------+----+----------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353635_-32335282","id":"20171109-054313_41402531","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46532"},{"text":"tmp2.unpersist()","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres108: tmp.type = [Week: string, SalesDepotID: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1510380353635_-32335282","id":"20171109-055036_1619592767","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46533"},{"text":"// Caching modes - https://spark.apache.org/docs/2.2.0/rdd-programming-guide.html#rdd-persistence","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510380353636_-34259027","id":"20171109-055512_332672465","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46534"},{"text":"%md # 42. Checkpointing","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>42. Checkpointing</h1>\n"}]},"apps":[],"jobName":"paragraph_1510380353637_-34643776","id":"20171109-055134_49521634","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46535"},{"text":"%md\n\nIn case the job fails during the run, spark takes care of restarting the job. Incase we cache / persist any data, the lineage / DAG \n(methodology in which we computed the cached DF) is saved and the job can recompute the cached DF.\n\nHowever, if you'd like to throw the DAG away, use checkpointing. Checkpointing only stores the DF onto the disk and forgets how its computed.\n\nNote: Checkpointed DFs are persisted to disk can be re-used. Example: You can store pre-computed features for other ML jobs.\n\nReference: https://stackoverflow.com/a/35130205","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In case the job fails during the run, spark takes care of restarting the job. Incase we cache / persist any data, the lineage / DAG\n<br  />(methodology in which we computed the cached DF) is saved and the job can recompute the cached DF.</p>\n<p>However, if you'd like to throw the DAG away, use checkpointing. Checkpointing only stores the DF onto the disk and forgets how its computed.</p>\n<p>Note: Checkpointed DFs are persisted to disk can be re-used. Example: You can store pre-computed features for other ML jobs.</p>\n<p>Reference: https://stackoverflow.com/a/35130205</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353638_-33489529","id":"20171109-055504_1963717369","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46536"},{"text":"%md # 12. Managing Spark Partitions for efficient processing\n\n## 43. Coalesce - large datasets need coalescing\nhttps://hackernoon.com/managing-spark-partitions-with-coalesce-and-repartition-4050c57ad5c4","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>12. Managing Spark Partitions for efficient processing</h1>\n<h2>43. Coalesce - large datasets need coalescing</h2>\n<p>https://hackernoon.com/managing-spark-partitions-with-coalesce-and-repartition-4050c57ad5c4</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353638_-33489529","id":"20171109-055916_2123599818","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46537"},{"text":"%md\nDifferences between coalesce and repartition\nThe repartition algorithm does a full shuffle of the data and creates equal sized partitions of data. coalesce combines existing partitions to avoid a full shuffle.","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Differences between coalesce and repartition\n<br  />The repartition algorithm does a full shuffle of the data and creates equal sized partitions of data. coalesce combines existing partitions to avoid a full shuffle.</p>\n"}]},"apps":[],"jobName":"paragraph_1510380353639_-33874278","id":"20171109-060543_493134394","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46538"},{"text":"data.where($\"Week\".isin(7,8)).groupBy(\"ClientID\", \"RouteID\", \"Week\").agg(expr(\"PERCENTILE(DEMAND, 0.75)\") as \"quartile_3\").show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------+----+----------+\n|ClientID|RouteID|Week|quartile_3|\n+--------+-------+----+----------+\n|  100115|   2010|   7|      8.75|\n|  100117|   2112|   7|       8.0|\n| 1001485|   1607|   7|       7.5|\n| 1001648|   4106|   8|       4.0|\n| 1001841|   1241|   8|       4.0|\n| 1001989|   1203|   7|      3.25|\n| 1001990|   1229|   7|       3.0|\n| 1002098|   1041|   7|      4.75|\n| 1002193|   5021|   7|       0.0|\n+--------+-------+----+----------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353640_-35798022","id":"20171109-060242_653580552","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46539"},{"text":"data.rdd.partitions.size","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres113: Int = 8\n"}]},"apps":[],"jobName":"paragraph_1510380353640_-35798022","id":"20171109-060350_482225192","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46540"},{"text":"// val tmp3 = data.where($\"Week\".isin(7,8)).coalesce(2)\ntmp3.groupBy(\"ClientID\", \"RouteID\", \"Week\").agg(expr(\"PERCENTILE(DEMAND, 0.75)\") as \"quartile_3\").show(9)","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-------+----+----------+\n|ClientID|RouteID|Week|quartile_3|\n+--------+-------+----+----------+\n|  100115|   2010|   7|      8.75|\n|  100117|   2112|   7|       8.0|\n| 1001485|   1607|   7|       7.5|\n| 1001648|   4106|   8|       4.0|\n| 1001841|   1241|   8|       4.0|\n| 1001989|   1203|   7|      3.25|\n| 1001990|   1229|   7|       3.0|\n| 1002098|   1041|   7|      4.75|\n| 1002193|   5021|   7|       0.0|\n+--------+-------+----+----------+\nonly showing top 9 rows\n\n"}]},"apps":[],"jobName":"paragraph_1510380353641_-36182771","id":"20171109-060416_1022744379","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46541"},{"text":"%md # 13. Spark ops for Feature Engineering\n\n## 45. Aggregations conditioned on other columns & 46. Windowed aggregations","dateUpdated":"2017-11-11T06:05:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>13. Spark ops for Feature Engineering</h1>\n<h2>45. Aggregations conditioned on other columns &amp; 46. Windowed aggregations</h2>\n"}]},"apps":[],"jobName":"paragraph_1510380353642_-35028525","id":"20171109-060439_394765596","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46542"},{"text":"import org.apache.spark.sql.functions.{lead, lag}\nimport org.apache.spark.sql.expressions.Window","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport org.apache.spark.sql.functions.{lead, lag}\n\nimport org.apache.spark.sql.expressions.Window\n"}]},"apps":[],"jobName":"paragraph_1510380353643_-35413274","id":"20171109-084351_1617137631","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46543"},{"text":"// For each client, let's calculate total demand in previous weeks.\ndata.select(\"Week\", \"ClientID\", \"Demand\")\n    .groupBy(\"Week\", \"ClientID\")\n    .agg(sum($\"Demand\") as \"Demand\")\n    .withColumn(\"Client_Demand_1w\", lag($\"Demand\", 1).over(Window.partitionBy($\"ClientID\").orderBy(\"Week\")))\n    .withColumn(\"Client_Demand_2w\", lag($\"Demand\", 2).over(Window.partitionBy($\"ClientID\").orderBy(\"Week\")))\n    .withColumn(\"Client_Demand_3w\", lag($\"Demand\", 3).over(Window.partitionBy($\"ClientID\").orderBy(\"Week\")))\n    .show(9)","user":"anonymous","dateUpdated":"2017-11-11T11:45:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"\n\n\n<console>:62: error: not found: value Window\n           .withColumn(\"Client_Demand_1w\", lag($\"Demand\", 1).over(Window.partitionBy($\"ClientID\").orderBy(\"Week\")))\n                                                                  ^\n\n\n\n<console>:63: error: not found: value Window\n           .withColumn(\"Client_Demand_2w\", lag($\"Demand\", 2).over(Window.partitionBy($\"ClientID\").orderBy(\"Week\")))\n                                                                  ^\n\n\n\n<console>:64: error: not found: value Window\n           .withColumn(\"Client_Demand_3w\", lag($\"Demand\", 3).over(Window.partitionBy($\"ClientID\").orderBy(\"Week\")))\n                                                                  ^\n"}]},"apps":[],"jobName":"paragraph_1510380353643_-35413274","id":"20171109-065416_610639630","dateCreated":"2017-11-11T06:05:53+0000","dateStarted":"2017-11-11T11:45:48+0000","dateFinished":"2017-11-11T11:45:48+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:46544"},{"text":"val ex = Seq((1, \"a\", 3), (2, \"a\", 10), (3, \"b\", 7), (4, \"b\", 4), (5, \"c\", 3))\n    .toDF(\"day\", \"item\", \"sales\")\nex.show","dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nex: org.apache.spark.sql.DataFrame = [day: int, item: string ... 1 more field]\n+---+----+-----+\n|day|item|sales|\n+---+----+-----+\n|  1|   a|    3|\n|  2|   a|   10|\n|  3|   b|    7|\n|  4|   b|    4|\n|  5|   c|    3|\n+---+----+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353644_-37337018","id":"20171109-073434_1298728959","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46545"},{"text":"ex.withColumn(\"sales_lag_1d\", lag($\"sales\", 1).over(Window.partitionBy($\"item\").orderBy(\"day\")))\n    .na.fill(0)\n    .show","dateUpdated":"2017-11-11T11:43:51+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+----+-----+------------+\n|day|item|sales|sales_lag_1d|\n+---+----+-----+------------+\n|  5|   c|    3|        null|\n|  3|   b|    7|        null|\n|  4|   b|    4|           7|\n|  1|   a|    3|        null|\n|  2|   a|   10|           3|\n+---+----+-----+------------+\n\n"}]},"apps":[],"jobName":"paragraph_1510380353645_-37721767","id":"20171109-074057_1173417230","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46546"},{"dateUpdated":"2017-11-11T06:05:53+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510380353645_-37721767","id":"20171109-085026_1636755805","dateCreated":"2017-11-11T06:05:53+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46547"}],"name":"Data Processing in Spark","id":"2D197SHN9","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}